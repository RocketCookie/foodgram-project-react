from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from django.db import models

User = get_user_model()


class Tag(models.Model):
    '''
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–≥–æ–≤.
    '''

    name = models.CharField(
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=200, unique=True, blank=False
    )

    color = models.CharField(
        verbose_name='–¶–≤–µ—Ç –≤ HEX', max_length=7, unique=True, blank=False
    )

    slug = models.SlugField(
        verbose_name='–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ª–∞–≥',
        max_length=200,
        unique=True,
        blank=False,
    )

    class Meta:
        verbose_name = '–¢–µ–≥'
        verbose_name_plural = '–¢–µ–≥–∏'

    def __str__(self):
        return self.name


class Ingredient(models.Model):
    '''
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
    '''

    name = models.CharField(
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=200, blank=False
    )

    measurement_unit = models.CharField(
        verbose_name='–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', max_length=200, blank=False
    )

    class Meta:
        verbose_name = '–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç'
        verbose_name_plural = '–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã'

    def __str__(self):
        return self.name


class Recipe(models.Model):
    '''
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤.
    '''

    ingredients = models.ManyToManyField(
        Ingredient,
        verbose_name='–°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤',
        related_name='recipes',
        through='IngredientInRecipe',
    )

    tags = models.ManyToManyField(
        Tag, verbose_name='–°–ø–∏—Å–æ–∫ id —Ç–µ–≥–æ–≤', related_name='recipes'
    )

    author = models.ForeignKey(
        User,
        verbose_name='–ê–≤—Ç–æ—Ä',
        related_name='recipes',
        on_delete=models.CASCADE,
    )

    image = models.ImageField(
        verbose_name='–ö–∞—Ä—Ç–∏–Ω–∫–∞, –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤ Base64',
        upload_to='recipes/images/',
        blank=False,
    )

    name = models.CharField(
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=200, blank=False
    )

    text = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', blank=False)

    cooking_time = models.PositiveSmallIntegerField(
        verbose_name='–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)', blank=False
    )

    create_date = models.DateTimeField(
        verbose_name='–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', auto_now_add=True
    )

    class Meta:
        ordering = ('-create_date',)
        verbose_name = '–†–µ—Ü–µ–ø—Ç'
        verbose_name_plural = '–†–µ—Ü–µ–ø—Ç—ã'

    def __str__(self):
        return self.name

    def validate_ingredients(self) -> None:
        '''
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤.
        '''
        if self.ingredients.count() < 1:
            raise ValidationError(
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1 –∏ –±–æ–ª–µ–µ.'
            )

# –ò–∑-–∑–∞ —Ç—É–ø–æ–π –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞,
# —Ä–µ—Ü–µ–ø—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ üò°
# –î–æ–±–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Å–µ—Ä–∏–∞–ª–∞–π–∑–µ—Ä
    def clean(self) -> None:
        super().clean()
        self.validate_ingredients()


class IngredientInRecipe(models.Model):
    '''
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏.
    '''

    ingredient = models.ForeignKey(
        Ingredient,
        verbose_name='–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç',
        related_name='recipe_ingredients',
        on_delete=models.CASCADE,
    )

    recipe = models.ForeignKey(
        Recipe,
        verbose_name='–†–µ—Ü–µ–ø—Ç',
        related_name='recipe_ingredients',
        on_delete=models.CASCADE,
    )

    amount = models.PositiveIntegerField(
        verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', blank=False
    )

    class Meta:
        verbose_name = '–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç –≤ —Ä–µ—Ü–µ–ø—Ç–µ'
        verbose_name_plural = '–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã –≤ —Ä–µ—Ü–µ–ø—Ç–µ'

    def __str__(self):
        return (
            f'{self.ingredient.name} {self.amount} '
            f'{self.ingredient.measurement_unit}'
        )


class Favorite(models.Model):
    '''
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    '''

    recipe = models.ForeignKey(
        Recipe, verbose_name='–†–µ—Ü–µ–ø—Ç', on_delete=models.CASCADE
    )

    user = models.ForeignKey(
        User, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', on_delete=models.CASCADE
    )

    class Meta:
        default_related_name = 'is_favorited'
        verbose_name = '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'
        verbose_name_plural = '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ'
        constraints = [
            models.UniqueConstraint(
                fields=['recipe', 'user'], name='unique_favorite'
            )
        ]

    def __str__(self):
        return f'{self.recipe.name} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É ' f'{self.user.username}'


class ShoppingCart(models.Model):
    '''
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    '''

    recipe = models.ForeignKey(
        Recipe, verbose_name='–†–µ—Ü–µ–ø—Ç', on_delete=models.CASCADE
    )

    user = models.ForeignKey(
        User, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', on_delete=models.CASCADE
    )

    class Meta:
        default_related_name = 'is_in_shopping_cart'
        verbose_name = '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫'
        verbose_name_plural = '–°–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫'
        constraints = [
            models.UniqueConstraint(
                fields=['recipe', 'user'], name='unique_shopping_cart'
            )
        ]

    def __str__(self):
        return (
            f'{self.recipe.name} –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫ —É ' f'{self.user.username}'
        )
